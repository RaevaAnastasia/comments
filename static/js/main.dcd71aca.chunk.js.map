{"version":3,"sources":["Article/Article.js","News/News.js","Add/Add.js","App.js","serviceWorker.js","index.js"],"names":["Article","props","useState","visible","setIsVisible","className","data","author","text","onClick","e","preventDefault","bigText","News","newsList","map","elem","index","key","length","Add","useRef","agree","button","isDisabled","setIsDisabled","isAuthor","setIsAuthor","isText","setIsText","onFieldChange","setter","target","value","trim","type","defaultValue","placeholder","ref","onChange","bind","this","id","defaultChecked","for","item","current","updateNews","disabled","newNews","App","news","setNews","member","array","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcd71aca.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Article(props) {\n    let [visible, setIsVisible] = useState(false);\n\n    function onClickReadmore(e) {\n        e.preventDefault();\n        setIsVisible(true);\n    }\n\n    return ( <div className = \"news__wrap\">\n            <p className = \"news__author\" > { props.data.author } </p>  \n            <p className = \"news__text\" > { props.data.text } </p>  \n            <button className = { \"news__readmore \" + (visible ? \"none\" : \"\") }\n            onClick = { onClickReadmore } > Подробнее </button>  \n            <p className = { \"news__text \" + (visible ? \"\" : \"none\") } > { props.data.bigText } </p> \n        </div>\n    );\n}\n\nArticle.propTypes = {\n    data: PropTypes.shape({\n        author: PropTypes.string.isRequired,\n        text: PropTypes.string.isRequired,\n        bigText: PropTypes.string.isRequired\n    })\n}\n\nexport default Article;","import React from 'react';\nimport Article from '../Article/Article.js';\nimport './News.css';\n\nfunction News(props) {\n    let data = props.data;\n    let newsList = data.map(function(elem, index) {\n            return ( < Article key = { index } data = { elem }/>);\n            });\n\n    let noNews = function() {\n        return ( <div className = \"news__no\" >\n            <p > К сожалению, новостей нет </p>  \n            </div>\n        );\n    }\n\n    return ( <div className = \"news\"> \n        { data.length === 0 ? noNews() : newsList }\n        <strong> Всего комментариев: { data.length } </strong>  \n        </div>\n    );\n}\n\nexport default News;","import React,  {useRef, useState} from 'react';\nimport './Add.css';\n\nfunction Add (props) {\n    let author = useRef();\n    let text = useRef();\n    let agree = useRef();\n    let button = useRef();\n    let [isDisabled, setIsDisabled] = useState(true);\n    let [isAuthor, setIsAuthor] = useState(true);\n    let [isText, setIsText] = useState(true);\n\n    function onFieldChange (setter, e) {\n        e.target.value.trim().length > 0 ? setter(false) : setter(true);\n    }\n\n    function showValue(e) {\n        e.preventDefault();\n        let item = [{\n            author: author.current.value,\n            text: text.current.value,\n            bigText: '...'\n        }];\n        \n        props.updateNews(item, props.data);\n    }\n\n    function onCheck (e) {\n       setIsDisabled(!isDisabled);\n    }\n\n    return (<form className=\"add\">\n            <input className=\"add__author-field\" \n            type=\"text\" \n            defaultValue=\"\" \n            placeholder=\"Ваше имя\" \n            ref={author}\n            onChange={onFieldChange.bind(this, setIsAuthor)}/>\n            <textarea className=\"add__text\" \n            defaultValue=\"\"\n            placeholder=\"Ваш комментарий\"\n            ref={text}\n            onChange={onFieldChange.bind(this, setIsText)}></textarea>\n            <div className=\"add__wrap\">\n                <input className=\"add__check\" \n                type=\"checkbox\" \n                id=\"agree\"\n                defaultChecked={false}\n                ref={agree}\n                onChange={onCheck}/>\n                <label className=\"add__label\" for=\"agree\">Я согласен с правилами сообщества</label>\n            </div>\n            <button className=\"add__button\" \n            onClick={showValue} \n            ref={button} \n            disabled={isDisabled || isAuthor || isText}>Добавить комментарий</button>\n        </form>\n    );\n}\n\nexport default Add;","import React, {useState} from 'react';\nimport './App.css';\nimport News from './News/News.js';\nimport Add from './Add/Add.js';\n\nlet newNews = [\n  {\n    author: 'Мистер Программистер',\n    text: 'Мое важное мнение таково:',\n    bigText: 'Значимость этих проблем настолько очевидна, что дальнейшее развитие различных форм деятельности в значительной степени обуславливает создание дальнейших направлений развития. Равным образом реализация намеченных плановых заданий обеспечивает широкому кругу (специалистов) участие в формировании систем массового участия. Значимость этих проблем настолько очевидна, что рамки и место обучения кадров требуют от нас анализа направлений прогрессивного развития. Равным образом рамки и место обучения кадров требуют от нас анализа новых предложений. Товарищи! укрепление и развитие структуры позволяет оценить значение существенных финансовых и административных условий.'\n  },\n  {\n    author: 'Маринка',\n    text: 'Я сама с ребёнком зарабатываю по 40т.р. ',\n    bigText: 'В месяц разобралась легко со своего смартфона просто заходите на мой профиль там я подробно расписала спасибо'\n  },\n  {\n    author: 'Гость',\n    text: 'Я зашел посмотреть и уже ухожу',\n    bigText: 'Честно говоря, просто тяну время чтобы не читать документацию'\n  }\n];\n\nfunction App() {\n  let [news, setNews] = useState(newNews);\n  function updateNews(member, array) {\n    let newNews = member.concat(array);\n    setNews(newNews);\n  };\n\n  return (\n    <div className=\"App\">\n      <h3 className=\"App__title\">Комментарии</h3>  \n      <Add updateNews={updateNews} data={news}/>    \n      <News data={news}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}